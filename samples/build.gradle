import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${Versions.android_gradle_plugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.kotlin}"
    }
}

subprojects {
    afterEvaluate { proj ->
        if (proj.hasProperty('android')) {
            configure(android.lintOptions) {
                abortOnError false
            }
            android {
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_21
                    targetCompatibility JavaVersion.VERSION_21
                }

                ndkVersion Versions.ndk
            }
        }

        plugins.withId('com.android.application') {
            tasks.register('DownloadAndExtractAssets', Copy) {
                def resourcesURL = gradle.ext.iinkResourcesURL
                def sourceUrls = ["${resourcesURL}/myscript-iink-recognition-diagram.zip",
                                  "${resourcesURL}/myscript-iink-recognition-raw-content.zip",
                                  "${resourcesURL}/myscript-iink-recognition-math.zip",
                                  "${resourcesURL}/myscript-iink-recognition-text-en_US.zip"]
                def targetDir = new File(proj.projectDir, "src/main/assets/")
                def diagramConf = new File(targetDir, "conf/diagram.conf")
                def rawContentConf = new File(targetDir, "conf/raw-content.conf")
                def mathConf = new File(targetDir, "conf/math.conf")
                def textConf = new File(targetDir, "conf/en_US.conf")

                if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
                    def tmpAssetsDir = new File(proj.projectDir, "tmp-assets/")
                    def zipDir = new File(tmpAssetsDir, "zips")

                    if (!tmpAssetsDir.isDirectory())
                        tmpAssetsDir.mkdirs()

                    if (!zipDir.isDirectory())
                        zipDir.mkdirs()

                    sourceUrls.each { sourceUrl ->
                        ant.get(src: sourceUrl, dest: zipDir.getPath())
                    }

                    File[] zipFiles = FileUtils.listFiles(zipDir, FileFilterUtils.suffixFileFilter("zip"), FileFilterUtils.trueFileFilter())
                    zipFiles.each { File zipFile ->
                        from zipTree(zipFile)
                        into tmpAssetsDir
                    }
                }
            }

            tasks.register('CopyAssets', Copy) {
                dependsOn DownloadAndExtractAssets
                def targetDir = new File(proj.projectDir, "src/main/assets/")
                def diagramConf = new File(targetDir, "conf/diagram.conf")
                def rawContentConf = new File(targetDir, "conf/raw-content.conf")
                def mathConf = new File(targetDir, "conf/math.conf")
                def textConf = new File(targetDir, "conf/en_US.conf")

                if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
                    def tmpAssetsDir = new File(proj.projectDir, "tmp-assets/")

                    if (!tmpAssetsDir.isDirectory())
                        tmpAssetsDir.mkdirs()

                    def recognitionAssetDir = new File(tmpAssetsDir, "recognition-assets/")

                    println "Copying downloaded assets from $recognitionAssetDir to $targetDir"
                    from recognitionAssetDir
                    into targetDir

                    doLast {
                        tmpAssetsDir.deleteDir()
                    }
                }
            }

            preBuild.dependsOn(CopyAssets)
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    ext {
        compileSdk = Versions.compileSdk
        minSdk = Versions.minSdk
        targetSdk = Versions.targetSdk

        appcompatVersion = Versions.appcompat
        gsonVersion = Versions.gson

        iinkVersionName = gradle.ext.iinkVersionName
        iinkVersionCode = gradle.ext.iinkVersionCode
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}